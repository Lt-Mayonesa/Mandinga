<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_player_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sp_player_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// controls
keyUp = controls[0];
keyDown = controls[1];
keyLeft = controls[2];
keyRight = controls[3];
keyJump = controls[4];
keyChange = controls[5];
keyAttack = controls[6];
keyRoll = controls[7];
keyThrow = controls[8];
// basic vars

hp = 100;
movement = 1;
dir = 1;
walking = false;
vspd = 0;
hspd = 0;
loopFrame = 3; // frame in wich idle animation starts loops
animationSpeed = 0.2;
doingAction = false;
stance = true; //0 = poncho puesto; 1 = poncho en mano
changeStance = false;
currentSprite = sprite_index;

//jump vars
jumps = 0;
jumpstr = 3;
jumping = false;
jumpTimer = 0;

// bolea vars
bolCharge = 0;
bolCharging = false;
bol = 0;

// attack vars
comboCharge = 0;
comboCooldown = 0;
comboWait = false;

wasOnGround = place_meeting(x, y + 1, obj_tile);
image_speed = animationSpeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>walking = false;
currentSprite = sprite_index;
grounded = place_meeting(x, y + 1, obj_tile);

//friccion
if(hspd != 0) {
    if (grounded) {
        if(hspd &gt; 0.5 || hspd &lt; -0.5) hspd -= 0.5 * dir;
        else hspd -= 0.1 * dir;
    } else {
        hspd -= 0.1 * dir;
    }
}
/*
if(grounded) {
    if(hspd &gt; 0) hspd -=
} else {

}*/

//change stance
if (vspd = 0 &amp;&amp; !doingAction) {
    if(keyboard_check_pressed(keyChange)) {
        stance = !stance;
        if (stance) sprite_index = sp_player_idle;
        else sprite_index = sp_player_idle_2;
        image_index = 0;
        doingAction = true;
        changeStance = true;
    }
}

//movement
if(!doingAction) {
    if(keyboard_check(keyLeft)) {
        dir = -1;
        if(!stance) {
            if(hspd &gt; movement * dir) hspd = movement * dir;
        } else {
            if(hspd &gt; (movement * 3) * dir) hspd = (movement * 3) * dir;
        }
        walking = true;
        image_xscale = dir;
    }
    if(keyboard_check(keyRight)) {
        dir = 1;
        if(!stance) {
            if(hspd &lt; movement * dir) hspd = movement * dir;
        } else {
            if(hspd &lt; (movement * 3) * dir) hspd = (movement * 3) * dir;
        }
        walking = true;
        image_xscale = dir;
    }
}
//Attack
if(!doingAction) {
    if(keyboard_check_pressed(keyAttack)){
        if (stance) {
            inst = instance_create(x, y, obj_normalAttack);
            inst.image_xscale = dir;
            inst.depth = depth -10;
            if(grounded) {
                sprite_index = sp_player_attack;
                instance_create(x, y, obj_dust_from_step);
                hspd += 5 * dir;
            } else {
                sprite_index = sp_player_attackAir;
                hspd += 5 * dir;
            }
            image_index = 0;
            doingAction = true;
        } else {
            if(grounded) {
                inst = instance_create(x, y, obj_normalAttack);
                inst.image_xscale = dir;
                inst.depth = depth -10;
                switch (comboCharge) {
                    case 0:
                        inst.sprite_index = sp_attack_2_a_dash;
                        sprite_index = sp_player_attack_2_a;
                        comboCharge++;
                        comboCooldown = 25;
                        comboWait = true;
                    break;
                    case 1:
                        inst.sprite_index = sp_attack_2_b_dash;
                        sprite_index = sp_player_attack_2_b;
                        comboCharge++;
                        comboCooldown = 25;
                        comboWait = true;
                    break;
                    case 2:
                        inst.sprite_index = sp_attack_dash;
                        sprite_index = sp_player_attack_2_c;
                        instance_create(x, y, obj_dust_from_step);
                        hspd += 5 * dir;
                        comboCharge = 0;
                    break;
                }
            } else {
                inst = instance_create(x, y, obj_normalAttack);
                inst.sprite_index = sp_spin_attack;
                inst.image_xscale = dir;
                inst.depth = depth -10;
                sprite_index = sp_player_attack_2_a;
                hspd *= 2;
            }
            image_index = 0;
            doingAction = true;
        }
    }
}

if(comboWait) comboCooldown--;
if(comboCooldown &lt; 0) {
    comboWait = false;
    comboCharge = 0;
}

// poncho &amp; roll
if(!doingAction) {
    if(keyboard_check_pressed(keyRoll)) {
        if(!stance) {
            inst = instance_create(x, y, obj_normalAttack);
            inst.sprite_index = sp_poncho_dash_1;
            inst.image_xscale = dir;
            inst.depth = depth -10;
            sprite_index = sp_player_ponchoAttack;
            image_index = 0;
            doingAction = true;
        }else if(place_meeting(x, y + 1, obj_tile)) {
            sprite_index = sp_player_roll;
            mask_index = sp_player_mask_ducking;
            hspd += 10 * dir;
            image_index = 0;
            doingAction = true;
        }
    }
}

// boleadora

if (!doingAction) {
    if(keyboard_check_pressed(keyThrow)) {
        bol = instance_create(x+(6 * -dir), y - 10, obj_boleadora);
        bol.depth = depth - 2 ;
        bol.dir = dir;
        bolCharge = 4;
        bolCharging = true;
    }
}
if(bolCharging) {
    bol.x = x + (6 * -dir);
    bol.y = y - 10;
    if(bolCharge &lt; 20) bolCharge += 0.1;
}
if(keyboard_check_released(keyThrow) &amp;&amp; bolCharging){
    bol.alive = true;
    bol.hspeed = bolCharge * dir;
    bol.vspeed = -1;
    if(vspd &lt; 0) bol.vspeed += vspd;
    bolCharging = false;
}

//jump

if(keyboard_check_pressed(keyJump)) {
    if(grounded) jumping = true;
}

if (jumping) {
    if(jumpTimer &lt; 20) {
        jumpTimer++;
        if(jumpTimer &gt; 12) jumpstr -= 0.1;
        vspd = -jumpstr;
        jumping = true;
    } else {
        jumping = false;
        jumpTimer = 0;
        jumpstr = 3;
    }
}

if(keyboard_check_released(keyJump)) {
    jumping = false;
    jumpTimer = 0;
    jumpstr = 3;
}


//handle animations
if(!doingAction) {
    if (stance) {
        if(vspd = 0) {
            if (walking) {
                sprite_index = sp_player_walking;
            } else {
                sprite_index = sp_player_idle;
                if(sprite_index != currentSprite) image_index = loopFrame;
            }
        }else if(vspd &lt; 0) {
            sprite_index = sp_player_jumping;
        }else {
            sprite_index = sp_player_falling;
        }
    } else {
        if(vspd = 0) {
            if (walking) {
                sprite_index = sp_player_walking_2;
            } else {
                sprite_index = sp_player_idle_2;
                if(sprite_index != currentSprite) image_index = loopFrame;
            }
        }else if(vspd &lt; 0) {
            sprite_index = sp_player_jumping_2;
        }else {
            sprite_index = sp_player_falling_2;
        }
    }
}

//Collisions
if(place_meeting(x + hspd, y, obj_tile)) {
    while(!place_meeting(x + sign(hspd),y, obj_tile)) {
        x += sign(hspd);
    }
    hspd = 0;
}
//show_debug_message(string(hspd));

x += hspd;

//grav
if(vspd &lt; 10 &amp;&amp; !jumping) vspd += grav;

if(place_meeting(x, y + vspd, obj_tile)) {
    while(!place_meeting(x, y + sign(vspd), obj_tile)) {
        y += sign(vspd);
    }
    vspd = 0;
}

y += vspd;
/*
if(wasOnGround &amp;&amp; !place_meeting(x, y + 1, obj_tile)) hspd /= 2; 

wasOnGround = place_meeting(x, y + 1, obj_tile);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(sprite_index = sp_player_attack || sprite_index = sp_player_attack_2_a || sprite_index = sp_player_attack_2_b || sprite_index = sp_player_attack_2_c || sprite_index = sp_player_attackAir || sprite_index = sp_player_roll || sprite_index = sp_player_ponchoAttack) {
    if (stance) sprite_index = sp_player_idle;
    else sprite_index = sp_player_idle_2;
    image_index = loopFrame;
    mask_index = sp_player_mask;
    doingAction = false;
}
if(sprite_index = sp_player_jumping || sprite_index = sp_player_jumping_2 || sprite_index = sp_player_idle || sprite_index = sp_player_idle_2) {
    image_index = loopFrame;
    if(changeStance) {
        changeStance = false;
        doingAction = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
